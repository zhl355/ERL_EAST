<launch>
    <!-- Frame Params -->
    <arg name="base_frame" default="base_link"/>
    <arg name="odom_frame" default="base_link"/>
    <arg name="map_frame" default="map"/>

    <!-- Control Params -->
    <arg name="ctrl_odom_topic" default="/scanmatch_odom"/>
    <arg name="enable_controller" default="true"/>

    <!-- Lidar Params -->
    <arg name="pointcld_topic" default="ouster/points"/>
    <arg name="scan_topic" default="front/scan"/>

    <!-- Hector Params -->
    <arg name="map_size" default="511"/>
    <arg name="map_start_x" default="0.5"/>
    <arg name="map_start_y" default="0.5"/>

    <!-- Governor Params -->
    <arg name="gvn_topic" default="/ref_gvn_status"/>
    <arg name="dist_topic" default="/ref_gvn_dist"/>
    <arg name="gvn_restart_topic" default="/gvn_restart"/>
    <arg name="use_costmap" default="true"/>

    <!-- arguments for grid map, costmap, planning, all bounds are inclusive --> 
    <arg name="costmap_planning_obstacle_ub" default="19"/> 
    <arg name="costmap_planning_upper_bound" value="5"/>
    <arg name="costmap_planning_unknown" value="3"/>

    <!-- Pointcloud to laser scan -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pcl2scan" output="screen">
        <remap from="cloud_in" to="$(arg pointcld_topic)" />
        <remap from="scan" to="$(arg scan_topic)" />
        <rosparam>
                target_frame: os_sensor # Leave disabled to output scan in pointcloud frame
                transform_tolerance: 0.01
                min_height: -0.30
                max_height: -0.05

                angle_min: -3.141 # -M_PI
                angle_max: 3.141  # M_PI
                angle_increment: 0.0061359 # M_PI/512
                scan_time: 0.05
                range_min: 0.29
                range_max: 90.01
                use_inf: true
                inf_epsilon: 1.0
        </rosparam>
    </node>

    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <!-- Frame names -->
        <param name="map_frame" value="$(arg map_frame)" />
        <param name="base_frame" value="$(arg base_frame)" />
        <param name="odom_frame" value="$(arg odom_frame)" />

        <!-- Tf use -->
        <param name="use_tf_scan_transformation" value="false"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="true"/>

        <!-- we can use this odom as localization -->
        <param name="pub_odometry" value="true"/>

        <!-- Map size / start point -->
        <param name="map_resolution" value="0.1"/>
        <param name="map_size" value="$(arg map_size)"/>
        <param name="map_size_x" value="$(arg map_size_x)"/>
        <param name="map_size_y" value="$(arg map_size_y)"/>
        <!-- put map origin to grid center full range is [0, 1] X [0, 1] -->
        <param name="map_start_x" value="$(arg map_start_x)"/>
        <param name="map_start_y" value="$(arg map_start_y)" />
        <param name="map_multi_res_levels" value="4" />

        <!-- Map update parameters -->
        <param name="update_factor_free" value="0.4"/>
        <param name="update_factor_occupied" value="0.9" />    
        <param name="map_update_distance_thresh" value="0.2"/>
        <param name="map_update_angle_thresh" value="0.9" />
        <param name="laser_z_min_value" value = "-1.0" />
        <param name="laser_z_max_value" value = "1.0" />
        <param name="laser_max_dist" value = "90.0" />
        <param name="laser_min_dist" value = "0.29" />
        <param name="map_pub_period" value = "0.025" />

        <!-- Advertising config --> 
        <param name="advertise_map_service" value="true"/>
        <param name="scan_subscriber_queue_size" value="5"/>
        <param name="scan_topic" value="$(arg scan_topic)"/>
    </node>

    <!--- Run costmap computation -->
    <node name="erl_costmap_ros" pkg="erl_costmap_ros" type="erl_costmap_ros_node" output="screen">
        <param name="gridmsg_obstacle_lower_bound" value="80"/>
        <param name="gridmsg_obstacle_upper_bound" value="100"/>
        <param name="gridmsg_unknown" value="-1"/>

        <param name="costmap_planning_robot_inscribed_radius" value="0.215"/>
        <param name="costmap_planning_gamma" value="7.0"/>
        <param name="costmap_planning_unknown" value="$(arg costmap_planning_unknown)"/>
        <param name="costmap_planning_lethal" value="$(arg costmap_planning_obstacle_ub)"/>
        <param name="costmap_planning_inscribed" value="$(eval arg('costmap_planning_obstacle_ub') - 1)"/>
        <param name="costmap_planning_cutoff_cost" value="$(arg costmap_planning_upper_bound)"/>

        <param name="costmap_visualization_unknown" value="-1"/>
        <param name="costmap_visualization_lethal" value="100"/>
        <param name="costmap_visualization_inscribed" value="90"/>
        <param name="costmap_visualization_planning_cutoff" value="-3"/>
        <param name="costmap_visualization_zero_cost" value="0"/>
    </node>

    <!-- Planning A* on costmap -->
    <include file="$(find erl_astar_ros)/launch/erl_astar_costmap2d_node.launch">
        <arg name="planning_frame" value="$(arg map_frame)" />
        <arg name="odom_topic" value="$(arg ctrl_odom_topic)" />
        <arg name="log_output" value="log" />
        <arg name="costmap_topic" value="/costmap" />

        <arg name="planning_cutoff_cost" value="$(arg costmap_planning_upper_bound)" />
        <arg name="costmap_msg_unknown_cost" value="$(arg costmap_planning_unknown)"/>
        <arg name="planning_unknown_cost" value="$(arg costmap_planning_unknown)"/>
        <arg name="publish_custom_path" value="true"/>
        <arg name="astar_eps" value="1.0"/>
    </include>

    <!--- ref gvn sense node -->
    <node pkg="ref_gvn_ros" type="ref_gvn_cone_dist_node.py" name="ref_gvn_cone"  output="log">
        <param name="map_topic" value="/map"/>
        <param name="map_frame" value="$(arg map_frame)"/>
        <param name="gvn_topic" value="$(arg gvn_topic)"/>
        <param name="dist_topic" value="$(arg dist_topic)"/>
        <param name="odom_topic" value="$(arg ctrl_odom_topic)"/>
        <param name="radius_offset" value="4.0"/>
        <param name="pub_freq" value="50.0"/>

        <!-- costmap related params -->
        <param name="use_costmap" value="$(arg use_costmap)"/>
        <param name="costmap_topic" value="/costmap"/>

        <param name="costmap_cost_unknown" value="$(arg costmap_planning_unknown)"/>
        <param name="costmap_free_lb" value="0"/>
        <param name="costmap_free_ub" value="127"/>
        <!-- costmap 8.3 value, corresponding to 0.333m -->
        <param name="costmap_obstacle_lb" value="8"/>
        <param name="costmap_obstacle_ub" value="$(arg costmap_planning_obstacle_ub)"/>
    </node>

    <!--- Run reference governor -->
    <node pkg="ref_gvn_ros" type="ref_gvn_node.py" name="ref_gvn" output="screen">
        <param name="display_nav_path" value="true"/>
        <param name="odom_topic" value="$(arg ctrl_odom_topic)"/>
        <param name="path_topic" value="/path"/>
        <param name="custom_path_topic" value="/erl_astar_ros/custom_path"/>
        <param name="dist_topic" value="$(arg dist_topic)"/>
        <param name="gvn_restart_topic" value="$(arg gvn_restart_topic)"/>
        <!-- ref gvn core parameteres-->
        <param name="ctrl_freq" value="60.0"/>
        <param name="kg" value="2.0"/>
    </node>

    <!-- Emergency Stop -->
    <node name="emergency_stop" pkg="stop_now" type="stop_now_node.py" output="screen">
        <rosparam command="load" file="$(find stop_now)/config/default.yaml"/>
    </node>

    <group if="$(arg enable_controller)" >
        <!--- Run cone controller as low level velocity controller -->
        <node pkg="erl_unicycle_controller" type="unicycle_controller_node.py" name="cone_controller"  output="log">
            <param name="odom_topic" value="$(arg ctrl_odom_topic)"/>
            <param name="setpoint_topic" value="/ref_gvn/local_goal"/>
            <param name="gvn_msg_topic" value="/ref_gvn_status"/>
            <param name="ctrl_freq" value="50.0"/>
            <param name="kv" value="0.5"/>
            <param name="kw" value="1.5"/>
            <!-- Control limits are set as the same as in control.yaml in jackal_control package -->
            <!-- linear velocity limit m/sec-->
            <param name="v_min" value="-0.01"/>
            <param name="v_max" value="2.0"/>
            <!-- angular velocity limit rad/sec-->
            <param name="w_min" value="-2.0"/>
            <param name="w_max" value="2.0"/>
        </node>
    </group >
</launch>